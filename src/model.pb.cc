// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFM {

namespace {

const ::google::protobuf::Descriptor* Mat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelParameters_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModelParameters_OUTPUT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_model_2eproto() {
  protobuf_AddDesc_model_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model.proto");
  GOOGLE_CHECK(file != NULL);
  Mat_descriptor_ = file->message_type(0);
  static const int Mat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, data_),
  };
  Mat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mat_descriptor_,
      Mat::default_instance_,
      Mat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, _has_bits_[0]),
      -1,
      -1,
      sizeof(Mat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mat, _internal_metadata_),
      -1);
  ModelParameters_descriptor_ = file->message_type(1);
  static const int ModelParameters_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameters, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameters, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameters, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameters, output_),
  };
  ModelParameters_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModelParameters_descriptor_,
      ModelParameters::default_instance_,
      ModelParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameters, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModelParameters),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelParameters, _internal_metadata_),
      -1);
  ModelParameters_OUTPUT_descriptor_ = ModelParameters_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mat_descriptor_, &Mat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModelParameters_descriptor_, &ModelParameters::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_2eproto() {
  delete Mat::default_instance_;
  delete Mat_reflection_;
  delete ModelParameters::default_instance_;
  delete ModelParameters_reflection_;
}

void protobuf_AddDesc_model_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_model_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013model.proto\022\003KFM\"/\n\003Mat\022\014\n\004rows\030\001 \002(\004\022"
    "\014\n\004cols\030\002 \002(\004\022\014\n\004data\030\003 \003(\001\"\225\001\n\017ModelPar"
    "ameters\022\023\n\001w\030\001 \002(\0132\010.KFM.Mat\022\023\n\001v\030\002 \002(\0132"
    "\010.KFM.Mat\022\t\n\001b\030\003 \002(\001\022+\n\006output\030\004 \002(\0162\033.K"
    "FM.ModelParameters.OUTPUT\" \n\006OUTPUT\022\013\n\007S"
    "IGMOID\020\000\022\t\n\005LINER\020\001", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model.proto", &protobuf_RegisterTypes);
  Mat::default_instance_ = new Mat();
  ModelParameters::default_instance_ = new ModelParameters();
  Mat::default_instance_->InitAsDefaultInstance();
  ModelParameters::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_2eproto {
  StaticDescriptorInitializer_model_2eproto() {
    protobuf_AddDesc_model_2eproto();
  }
} static_descriptor_initializer_model_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mat::kRowsFieldNumber;
const int Mat::kColsFieldNumber;
const int Mat::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mat::Mat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFM.Mat)
}

void Mat::InitAsDefaultInstance() {
}

Mat::Mat(const Mat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KFM.Mat)
}

void Mat::SharedCtor() {
  _cached_size_ = 0;
  rows_ = GOOGLE_ULONGLONG(0);
  cols_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mat::~Mat() {
  // @@protoc_insertion_point(destructor:KFM.Mat)
  SharedDtor();
}

void Mat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mat_descriptor_;
}

const Mat& Mat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Mat* Mat::default_instance_ = NULL;

Mat* Mat::New(::google::protobuf::Arena* arena) const {
  Mat* n = new Mat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mat::Clear() {
// @@protoc_insertion_point(message_clear_start:KFM.Mat)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Mat, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Mat*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rows_, cols_);

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Mat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFM.Mat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // required uint64 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_data;
        break;
      }

      // repeated double data = 3;
      case 3: {
        if (tag == 25) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_data())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFM.Mat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFM.Mat)
  return false;
#undef DO_
}

void Mat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFM.Mat)
  // required uint64 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rows(), output);
  }

  // required uint64 cols = 2;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cols(), output);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KFM.Mat)
}

::google::protobuf::uint8* Mat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KFM.Mat)
  // required uint64 rows = 1;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rows(), target);
  }

  // required uint64 cols = 2;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cols(), target);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFM.Mat)
  return target;
}

int Mat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KFM.Mat)
  int total_size = 0;

  if (has_rows()) {
    // required uint64 rows = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rows());
  }

  if (has_cols()) {
    // required uint64 cols = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cols());
  }

  return total_size;
}
int Mat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KFM.Mat)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 rows = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rows());

    // required uint64 cols = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cols());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double data = 3;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFM.Mat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFM.Mat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFM.Mat)
    MergeFrom(*source);
  }
}

void Mat::MergeFrom(const Mat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFM.Mat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Mat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFM.Mat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mat::CopyFrom(const Mat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFM.Mat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Mat::Swap(Mat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mat::InternalSwap(Mat* other) {
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mat_descriptor_;
  metadata.reflection = Mat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mat

// required uint64 rows = 1;
bool Mat::has_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mat::set_has_rows() {
  _has_bits_[0] |= 0x00000001u;
}
void Mat::clear_has_rows() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mat::clear_rows() {
  rows_ = GOOGLE_ULONGLONG(0);
  clear_has_rows();
}
 ::google::protobuf::uint64 Mat::rows() const {
  // @@protoc_insertion_point(field_get:KFM.Mat.rows)
  return rows_;
}
 void Mat::set_rows(::google::protobuf::uint64 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:KFM.Mat.rows)
}

// required uint64 cols = 2;
bool Mat::has_cols() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mat::set_has_cols() {
  _has_bits_[0] |= 0x00000002u;
}
void Mat::clear_has_cols() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mat::clear_cols() {
  cols_ = GOOGLE_ULONGLONG(0);
  clear_has_cols();
}
 ::google::protobuf::uint64 Mat::cols() const {
  // @@protoc_insertion_point(field_get:KFM.Mat.cols)
  return cols_;
}
 void Mat::set_cols(::google::protobuf::uint64 value) {
  set_has_cols();
  cols_ = value;
  // @@protoc_insertion_point(field_set:KFM.Mat.cols)
}

// repeated double data = 3;
int Mat::data_size() const {
  return data_.size();
}
void Mat::clear_data() {
  data_.Clear();
}
 double Mat::data(int index) const {
  // @@protoc_insertion_point(field_get:KFM.Mat.data)
  return data_.Get(index);
}
 void Mat::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:KFM.Mat.data)
}
 void Mat::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:KFM.Mat.data)
}
 const ::google::protobuf::RepeatedField< double >&
Mat::data() const {
  // @@protoc_insertion_point(field_list:KFM.Mat.data)
  return data_;
}
 ::google::protobuf::RepeatedField< double >*
Mat::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:KFM.Mat.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ModelParameters_OUTPUT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelParameters_OUTPUT_descriptor_;
}
bool ModelParameters_OUTPUT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ModelParameters_OUTPUT ModelParameters::SIGMOID;
const ModelParameters_OUTPUT ModelParameters::LINER;
const ModelParameters_OUTPUT ModelParameters::OUTPUT_MIN;
const ModelParameters_OUTPUT ModelParameters::OUTPUT_MAX;
const int ModelParameters::OUTPUT_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelParameters::kWFieldNumber;
const int ModelParameters::kVFieldNumber;
const int ModelParameters::kBFieldNumber;
const int ModelParameters::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelParameters::ModelParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFM.ModelParameters)
}

void ModelParameters::InitAsDefaultInstance() {
  w_ = const_cast< ::KFM::Mat*>(&::KFM::Mat::default_instance());
  v_ = const_cast< ::KFM::Mat*>(&::KFM::Mat::default_instance());
}

ModelParameters::ModelParameters(const ModelParameters& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KFM.ModelParameters)
}

void ModelParameters::SharedCtor() {
  _cached_size_ = 0;
  w_ = NULL;
  v_ = NULL;
  b_ = 0;
  output_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelParameters::~ModelParameters() {
  // @@protoc_insertion_point(destructor:KFM.ModelParameters)
  SharedDtor();
}

void ModelParameters::SharedDtor() {
  if (this != default_instance_) {
    delete w_;
    delete v_;
  }
}

void ModelParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelParameters_descriptor_;
}

const ModelParameters& ModelParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

ModelParameters* ModelParameters::default_instance_ = NULL;

ModelParameters* ModelParameters::New(::google::protobuf::Arena* arena) const {
  ModelParameters* n = new ModelParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModelParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:KFM.ModelParameters)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ModelParameters, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ModelParameters*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(b_, output_);
    if (has_w()) {
      if (w_ != NULL) w_->::KFM::Mat::Clear();
    }
    if (has_v()) {
      if (v_ != NULL) v_->::KFM::Mat::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModelParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFM.ModelParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFM.Mat w = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_w()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_v;
        break;
      }

      // required .KFM.Mat v = 2;
      case 2: {
        if (tag == 18) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_b;
        break;
      }

      // required double b = 3;
      case 3: {
        if (tag == 25) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_output;
        break;
      }

      // required .KFM.ModelParameters.OUTPUT output = 4;
      case 4: {
        if (tag == 32) {
         parse_output:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KFM::ModelParameters_OUTPUT_IsValid(value)) {
            set_output(static_cast< ::KFM::ModelParameters_OUTPUT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFM.ModelParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFM.ModelParameters)
  return false;
#undef DO_
}

void ModelParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFM.ModelParameters)
  // required .KFM.Mat w = 1;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->w_, output);
  }

  // required .KFM.Mat v = 2;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->v_, output);
  }

  // required double b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->b(), output);
  }

  // required .KFM.ModelParameters.OUTPUT output = 4;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KFM.ModelParameters)
}

::google::protobuf::uint8* ModelParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KFM.ModelParameters)
  // required .KFM.Mat w = 1;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->w_, false, target);
  }

  // required .KFM.Mat v = 2;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->v_, false, target);
  }

  // required double b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->b(), target);
  }

  // required .KFM.ModelParameters.OUTPUT output = 4;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFM.ModelParameters)
  return target;
}

int ModelParameters::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KFM.ModelParameters)
  int total_size = 0;

  if (has_w()) {
    // required .KFM.Mat w = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->w_);
  }

  if (has_v()) {
    // required .KFM.Mat v = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->v_);
  }

  if (has_b()) {
    // required double b = 3;
    total_size += 1 + 8;
  }

  if (has_output()) {
    // required .KFM.ModelParameters.OUTPUT output = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output());
  }

  return total_size;
}
int ModelParameters::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:KFM.ModelParameters)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .KFM.Mat w = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->w_);

    // required .KFM.Mat v = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->v_);

    // required double b = 3;
    total_size += 1 + 8;

    // required .KFM.ModelParameters.OUTPUT output = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->output());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFM.ModelParameters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ModelParameters* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFM.ModelParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFM.ModelParameters)
    MergeFrom(*source);
  }
}

void ModelParameters::MergeFrom(const ModelParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFM.ModelParameters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      mutable_w()->::KFM::Mat::MergeFrom(from.w());
    }
    if (from.has_v()) {
      mutable_v()->::KFM::Mat::MergeFrom(from.v());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_output()) {
      set_output(from.output());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModelParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFM.ModelParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelParameters::CopyFrom(const ModelParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFM.ModelParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelParameters::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_w()) {
    if (!this->w_->IsInitialized()) return false;
  }
  if (has_v()) {
    if (!this->v_->IsInitialized()) return false;
  }
  return true;
}

void ModelParameters::Swap(ModelParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModelParameters::InternalSwap(ModelParameters* other) {
  std::swap(w_, other->w_);
  std::swap(v_, other->v_);
  std::swap(b_, other->b_);
  std::swap(output_, other->output_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModelParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelParameters_descriptor_;
  metadata.reflection = ModelParameters_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModelParameters

// required .KFM.Mat w = 1;
bool ModelParameters::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModelParameters::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
void ModelParameters::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModelParameters::clear_w() {
  if (w_ != NULL) w_->::KFM::Mat::Clear();
  clear_has_w();
}
const ::KFM::Mat& ModelParameters::w() const {
  // @@protoc_insertion_point(field_get:KFM.ModelParameters.w)
  return w_ != NULL ? *w_ : *default_instance_->w_;
}
::KFM::Mat* ModelParameters::mutable_w() {
  set_has_w();
  if (w_ == NULL) {
    w_ = new ::KFM::Mat;
  }
  // @@protoc_insertion_point(field_mutable:KFM.ModelParameters.w)
  return w_;
}
::KFM::Mat* ModelParameters::release_w() {
  // @@protoc_insertion_point(field_release:KFM.ModelParameters.w)
  clear_has_w();
  ::KFM::Mat* temp = w_;
  w_ = NULL;
  return temp;
}
void ModelParameters::set_allocated_w(::KFM::Mat* w) {
  delete w_;
  w_ = w;
  if (w) {
    set_has_w();
  } else {
    clear_has_w();
  }
  // @@protoc_insertion_point(field_set_allocated:KFM.ModelParameters.w)
}

// required .KFM.Mat v = 2;
bool ModelParameters::has_v() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModelParameters::set_has_v() {
  _has_bits_[0] |= 0x00000002u;
}
void ModelParameters::clear_has_v() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModelParameters::clear_v() {
  if (v_ != NULL) v_->::KFM::Mat::Clear();
  clear_has_v();
}
const ::KFM::Mat& ModelParameters::v() const {
  // @@protoc_insertion_point(field_get:KFM.ModelParameters.v)
  return v_ != NULL ? *v_ : *default_instance_->v_;
}
::KFM::Mat* ModelParameters::mutable_v() {
  set_has_v();
  if (v_ == NULL) {
    v_ = new ::KFM::Mat;
  }
  // @@protoc_insertion_point(field_mutable:KFM.ModelParameters.v)
  return v_;
}
::KFM::Mat* ModelParameters::release_v() {
  // @@protoc_insertion_point(field_release:KFM.ModelParameters.v)
  clear_has_v();
  ::KFM::Mat* temp = v_;
  v_ = NULL;
  return temp;
}
void ModelParameters::set_allocated_v(::KFM::Mat* v) {
  delete v_;
  v_ = v;
  if (v) {
    set_has_v();
  } else {
    clear_has_v();
  }
  // @@protoc_insertion_point(field_set_allocated:KFM.ModelParameters.v)
}

// required double b = 3;
bool ModelParameters::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModelParameters::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
void ModelParameters::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModelParameters::clear_b() {
  b_ = 0;
  clear_has_b();
}
 double ModelParameters::b() const {
  // @@protoc_insertion_point(field_get:KFM.ModelParameters.b)
  return b_;
}
 void ModelParameters::set_b(double value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:KFM.ModelParameters.b)
}

// required .KFM.ModelParameters.OUTPUT output = 4;
bool ModelParameters::has_output() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModelParameters::set_has_output() {
  _has_bits_[0] |= 0x00000008u;
}
void ModelParameters::clear_has_output() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModelParameters::clear_output() {
  output_ = 0;
  clear_has_output();
}
 ::KFM::ModelParameters_OUTPUT ModelParameters::output() const {
  // @@protoc_insertion_point(field_get:KFM.ModelParameters.output)
  return static_cast< ::KFM::ModelParameters_OUTPUT >(output_);
}
 void ModelParameters::set_output(::KFM::ModelParameters_OUTPUT value) {
  assert(::KFM::ModelParameters_OUTPUT_IsValid(value));
  set_has_output();
  output_ = value;
  // @@protoc_insertion_point(field_set:KFM.ModelParameters.output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace KFM

// @@protoc_insertion_point(global_scope)
